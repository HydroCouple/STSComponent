#ifndef ELEMENT_H
#define ELEMENT_H

#include <string>

#include "variable.h"

struct Element;
struct ElementJunction;
class STSModel;


/*!
 * \brief This struct represents the channel control volume
 */
struct Element
{

    enum Bank
    {
      Left,
      Right
    };


    /*!
    * \brief Element - Creates an instance of the control volume element used to represent a computational
    * element in a reach.
    * \param numSolutes - Number of solutes that are going to be transported in addition to temperature.
    * \param from - The upstream junction of this element.
    * \param to - The downstream junction of this element.
    * \param project
    */
   Element(const std::string &id, ElementJunction *upstream, ElementJunction *downstream,  STSModel *model);

   /*!
    * \brief ~Element - Destructor for this class.
    */
   ~Element();

   /*!
    * \brief index unique identifier for element
    */
   int index;

   /*!
    * \brief id
    */
   std::string id;

   /*!
    * \brief x
    */
   double x;

   /*!
    * \brief y
    */
   double y;

   /*!
    * \brief z
    */
   double z;

   /*!
    * \brief temperature
    */
   Variable temperature;

   /*!
    * \brief prevTemperature
    */
   Variable prevTemperature;

   /*!
    * \brief mainChannelTemperature
    */
   double mainChannelTemperature;

   /*!
    * \brief numSolutes - Number of solutes
    */
   int numSolutes = 0;

   /*!
    * \brief soluteConcs [kg/m^3]
    */
   Variable *soluteConcs;

   /*!
    * \brief prevSoluteConcs [kg/m^3]
    */
   Variable *prevSoluteConcs;

   /*!
    * \brief mainChannelSoluteConcs
    */
   double *mainChannelSoluteConcs;

   /*!
    * \brief temperatureExchangeCoefficient m^2/s
    */
   double temperatureExchangeCoefficient;

   /*!
    * \brief soluteExchangeCoefficients
    */
   double *soluteExchangeCoefficients;

   /*!
    * \brief fromJunction
    */
   ElementJunction *upstreamJunction;

   /*!
    * \brief toJunction
    */
   ElementJunction *downstreamJunction;

   /*!
    * \brief bank
    */
   Bank bank;

   /*!
    * \brief beta
    */
   double beta;

   /*!
    * \brief length
    */
   double length;

   /*!
    * \brief depth
    */
   double depth;

   /*!
    * \brief xSectionArea
    */
   Variable xSectionArea;

   /*!
    * \brief width
    */
   double width;

   /*!
    * \brief relativeHumidity
    */
   double relativeHumidity;

   /*!
    * \brief evaporationRate
    */
   double evaporationRate;

   /*!
    * \brief evaporationHeatFlux
    */
   double evaporationHeatFlux;

   /*!
    * \brief saturationVaporPressure
    */
   double saturationVaporPressureAir;

   /*!
    * \brief saturationVaporPressure
    */
   double saturationVaporPressureWater;

   /*!
    * \brief vaporPressure
    */
   double vaporPressureAir;

   /*!
    * \brief vaporPressureWater
    */
   double vaporPressureWater;

   /*!
    * \brief windVelocity
    */
   double windSpeed;

   /*!
    * \brief airTemperature
    */
   double airTemperature;

   /*!
    * \brief convectionHeatFlux
    */
   double convectionHeatFlux;

   /*!
    * \brief externalHeatFluxes of J / s
    */
   double externalHeatFluxes;

   /*!
    * \brief externalSoluteFluxes W/m^2
    */
   double radiationFluxes;

   /*!
    * \brief externalSoluteFluxes of the form kg / s
    */
   double *externalSoluteFluxes;

   /*!
    * \brief heatBalance
    */
   double totalHeatBalance;

   /*!
    * \brief totalRadiationHeatBalance
    */
   double totalRadiationFluxesHeatBalance;

   /*!
    * \brief totalExternalHeatFluxesBalance
    */
   double totalExternalHeatFluxesBalance;

   /*!
    * \brief totalEvaporativeHeatFluxesBalance
    */
   double totalEvaporativeHeatFluxesBalance;

   /*!
    * \brief totalConvectiveHeatFluxesBalance
    */
   double totalConvectiveHeatFluxesBalance;

   /*!
    * \brief soluteMassBalance
    */
   double *totalSoluteMassBalance;

   /*!
    * \brief totalExternalSoluteFluxesMassBalance
    */
   double *totalExternalSoluteFluxesMassBalance;

   double mcHeatExchangeFlux;

   double *mcSoluteExchangeFlux;

   double windFunction;


   /*!
    * \brief model
    */
   STSModel *model;

   /*!
    * \brief initializeSolutes
    * \param numSolutes
    */
   void initialize();

   /*!
    * \brief initializeSolutes
    */
   void initializeSolutes();

   /*!
    * \brief computeDTDt - Computes the time derivative of temperature based on data generated by the ODE solver.
    * \param dt - The timestep over which to compute the solute gradient.
    * \param T - The temperature array for all elements.
    * \return
    */
   double computeDTDt(double dt, double T[]);

   /*!
    * \brief computeEvaporation
    * \param dt
    * \param T
    * \return
    */
   void computeDTDtEvaporation();

   /*!
    * \brief computeConvection
    * \param dt
    * \param T
    * \return
    */
   void computeDTDtConvection();

   /*!
    * \brief computeDSoluteDt
    * \param dt
    * \param S
    * \param soluteIndex
    * \return
    */
   double computeDSoluteDt(double dt, double S[], int soluteIndex);

   /*!
    * \brief calculateHydraulicVariables
    * \return
    */
   void calculateHydraulicVariables();

   /*!
    * \brief commputeDispersionFactor 1/s
    * \return
    */
   double computeDispersionFactor() const;

   /*!
    * \brief computeHeatBalance
    */
   void computeHeatBalance(double timeStep);

   /*!
    * \brief computeSoluteBalance
    * \param soluteIndex
    */
   void computeSoluteBalance(double timeStep, int soluteIndex);

};

#endif // ELEMENT_H
